<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA笔记</title>
    <url>/hausetsute.gitee.io/2021/03/31/JAVA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><pre><code>封装性 继承性 多态性            
    封装性：
    继承性：                
    多态性：
</code></pre>
<hr>
<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><pre><code>2.1
public int age; //年龄
public String sex; //性别
public float height; //身高
public String name; //姓名
//和声明变量一样    
public int getAge() &#123;
    return age;
&#125;
public void setAge(int age) &#123;
    this.age = age;
&#125;
public String getSex() &#123;
    return sex;
&#125;
public void setSex(String sex) &#123;
    this.sex = sex;
&#125;
public float getHeight() &#123;
    return height;
&#125;
public void setHeight(float height) &#123;
    this.height = height;
&#125;
public String getName() &#123;
    return name;
&#125;
public void setName(String name) &#123;
    this.name = name;
&#125;    
//思考行为
public void think()&#123;
&#125;    
//吃的行为
public void eat()&#123;
&#125;    
public String toString() &#123;
    return &quot;Person [age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, height=&quot; + height + &quot;, name=&quot; + name + &quot;]&quot;;
&#125;    
public static void main(String[] args) &#123;
    Person p1  = new Person(); //一个person类型的变量叫p1
    Person p = new Person();
    p.name = &quot;张三&quot;;
    p.age = 20;
    p.sex = &quot;男&quot;;
    p.height = 170;
    System.out.println(p);
    System.out.println(&quot;*********&quot;);
    p1.setAge(22);
    p1.setName(&quot;小红&quot;);
    p1.setSex(&quot;女&quot;);
    p1.setHeight(155);
    System.out.println(&quot;姓名：&quot;+p1.getName()+&quot;  年龄：&quot;+p1.getAge()+&quot;  身高：&quot;+p1.getHeight()+&quot;  性别：&quot;+p1.getSex());
    &#125;
&#125;
/*Person@246ae04d 告诉我们这个对象是person类的对象，后面的数字是（perso（p)是声明了一个person的名字叫p的变量）*/
/*new person要付给变量p，数字是存放newpers的地址，在Java中叫做引用，person p通过地址来找到newperson并操纵它*/
2.2
2.3
    public class Student &#123;
        public int age;
        public String name;        
        public void introduce() &#123;        
            System.out.println(&quot;年龄:&quot; + age + &quot; &quot; + &quot;姓名:&quot; + name);
        &#125;
        public static void main(String[] args) &#123;
            Student stu = new Student();
            stu.name = &quot;小红&quot;;
            stu.age = 20;
            stu.introduce();
        &#125;
    &#125;
2.4类的封装
    属性私有化：private修饰
    获取：getXXX方法
    赋值：setXXX方法
    public class Student &#123;
        public int age;
        public String name; //公共的修饰符：public
        private String telephone; //私有的修饰符：private            
        public String getTelephone() &#123; //get获取
            return telephone;
        &#125;
        public void setTelephone(String telephone) &#123; //set设置/赋值
            this.telephone = telephone;
        &#125;
        public void introduce() &#123;        
            System.out.println(&quot;年龄:&quot; + age + &quot; &quot; + &quot;姓名:&quot; + name);
        &#125;
        public static void main(String[] args) &#123;
            Student stu = new Student();
            stu.name = &quot;小红&quot;;
            stu.age = 20;
            stu.introduce();
        &#125;
    &#125;
</code></pre>
<hr>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><pre><code>3.1构造方法
    1.方法名和类名相同
    2.方法名前面没有返回值类型的声明
    3.方法中不能有return语句返回一个值
3.2构造方法的重载
3.3
3.4this关键字
    1.有this关键字，前面所访问的就是成员变量，后面的就是方法的参数
    2.可以调用构造方法
    3.在一个方法中可以通过this调用另一个方法
        public class Bird &#123;
            public String color;//成员变量                
            private Bird(String color) &#123;//局部变量，作用域在花括号内
                this.color = color;//有this关键字，前面所访问的就是成员变量，后面的就是方法的参数
            &#125;
            public Bird() &#123;
                this(&quot;green&quot;);//调用带参的构造方法，调用构造方法必须放在方法体的第一行
            &#125;
            public void sport() &#123;
                this.fly();//在一个方法中可以通过this调用另一个方法
            &#125;
            public void fly() &#123;
                System.out.println(&quot;我会飞哦。。。。&quot;);
            &#125;
            public static void main(String[] args) &#123;
                Bird bird = new Bird();//调用空参的构造方法
                //Bird bird1 = new Bird(&quot;red&quot;);
                System.out.println(bird.color);
                //System.out.println(bird1.color);
                bird.sport();
            &#125;        
        &#125;
3.5垃圾回收机制
3.6static关键字
    3.6.1静态变量
        1.在java类中，可以用static关键字来修饰成员变量，该该变量被称为静态变量
        2.静态变量被所有实例共享，可以使用“类名.变量名”的形式来访问
        3.static关键字只能用于修饰成员变量，不能用于修饰局部变量，否则编译会报错
            public class Student&#123;
                public void study()&#123;
                    static int num = 10;//这行代码是非法的，会报错
                &#125;
            &#125;
            
        public class StaticDemo &#123;
            static int ticket = 10;//静态变量(始终只有唯一一份：ticket)
            int count = 0;//非静态(普通变量)    
            void sell() &#123;
                ticket--;//自减1
            &#125;
            void processNumber() &#123;
                count++;//自增1
            &#125;
            public static void main(String[] args) &#123;
                StaticDemo st1 = new StaticDemo();
                StaticDemo st2 = new StaticDemo();
                st1.sell();
                st1.processNumber();
                System.out.println(&quot;剩余：&quot;+st1.ticket);//10自减1=9
                System.out.println(&quot;处理完毕：&quot;+st1.count);//0自增1=1
                System.out.println(&quot;*****************&quot;);
                st2.sell();
                st2.processNumber();
                System.out.println(&quot;剩余：&quot;+st2.ticket);//9自减1=8
                System.out.println(&quot;处理完毕：&quot;+st2.count);//0自增1=1
                System.out.println(&quot;StaticDemo.ticket:&quot;+StaticDemo.ticket);
            &#125;
        &#125;
    3.6.2静态方法
    3.6.3静态代码块
        1.在java中，使用一对大括号包围起来的若干行代码被称为一个代码块
        2.使用static关键字修饰的代码块称为静态代码块
        3.当类被加载时，静态代码块会被执行，并且只会执行一次
        4.在程序中，经常使用静态代码块来对成员变量进行初始化
    public class StaticBlock &#123;
        public static Object obj;
        
        public StaticBlock() &#123;
            System.out.println(&quot;我是构造方法&quot;);//最后执行
        &#125;
        static &#123;
            obj = new Object();
            System.out.println(&quot;这是静态代码块&quot;);//优先执行，只会执行一次
        &#125;
        &#123;
            System.out.println(&quot;这不是静态代码块&quot;);//普通代码块，循环执行
        &#125;
        public static Object getobj() &#123;
            &#123;
                System.out.println(&quot;方法的非静态代码块&quot;);
            &#125;
                return obj;
        &#125;
        public static void main(String[] args) &#123;
            new StaticBlock();
            new StaticBlock();
            StaticBlock.getobj();
        &#125;
    &#125;
    3.6.4单例模式
        1.设计模式就是针对这些问题和需求，在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式
        2.单例模式是Java中的一种设计模式，它是指在设计一个类时，需要保证在整个程序运行期间针对该类只存在一个实例对象
3.7内部类
    3.7.1成员内部类
        1.成员内部类可以访问外部类的所有成员
        外部类名.内部类名 变量名 = new 外部类名().new 内部类名()
</code></pre>
<hr>
<h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><pre><code>    4.1java继承机制
    4.1.2方法重写
        1.方法重写存在于继承关系上
        2.方法重写时方法名相同，参数列表相同(参数个数、参数类型、参数顺序都必须一致)，方法返回值类型相同
        3.子类重写父类方法时，访问修饰符要大于等于父类方法修饰符
        4.父类的静态方法不能被重写
    4.1.3this()与super()
            this指自身，super指父类；自身大于父类
            super能够操作到的属性或行为，this一定能够操作；而用this能够操作到的，super却不一定能够操作到
            因为super操控父类，this操控本身，父类继承过来之后this就可以调用
            父类的构造方法不能被子类继承和重写
    4.2final关键字
        1.final关键字可用于修饰类、变量和方法
        final修饰的类不能被继承
        final修饰的方法不能被子类重写
        final修饰的变量(成员变量和局部变量)是常量，只能赋值一次
    4.3抽象类和接口
        4.3.1抽象类
            当定义一个类时，常常需要定义一些方法来描述该类的行为特征，但有时这些方法的实现方式时无法确定的
            Java允许在定义方法时不写方法名
            abstract void shout();//定义抽象方法shout()
            定义抽象方法没有方法体只有方法的定义
            一个类中有抽象方法时这个类就是抽象类
            抽象方法的子类要继承必须要重写父类抽象方法
            父类的抽象方法只有
            子类如果继承了抽象类，但没有完全实现父类的抽象方法，那么这个子类还是一个抽象类
            抽象类可以包含普通方法/静态方法/final修饰的方法
            抽象类里面不一定要有抽象方法
            抽象类里面可以有main方法
            抽象类不能实例化
                1.因为抽象类中可能包含抽象方法，而抽象方法只有方法的定义没有方法的实现
                2.如果要调抽象类的实例通过继承的方式来调用
            抽象方法不可以是静态方法
        4.3.2接口
            如果一个抽象类中的所有方法都是抽象的，则可以将这个类定义为接口类型，接口使用interface关键字来声明
            在接口里定义方法不能有方法体，必须是方法的声明
            接口里的方法默认是抽象方法
            接口里的方法不能用private修饰
            接口可以继承也可以多继承
</code></pre>
<hr>
]]></content>
      <categories>
        <category>编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSLQ笔记</title>
    <url>/hausetsute.gitee.io/2021/04/02/MYSQL%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><pre><code>一、高级查询
    1.单独使用group by
    2.group by和聚合函数一起使用
    3.group by和having一起使用
    4.使用limit限制查询结果的数量
        单独使用group by:
            单独使用group by关键字，查询的是每个分组中的一条记录。
                SELECT * FROM student GROUP BY gender;
        group by和聚合函数一起使用:
            GROUP BY和聚合函数一起使用，可以统计出某个或者某些字段在一个分组中的最大值、最小值、平均值等等。
                SELECT COUNT(*),gender FROM student GROUP BY gender;
        group by和having一起使用:
            HAVING和WHERE都用于设置条件对查询结果进行过滤。两者区别在于HAVING后可以跟聚合函数，而WHERE不能。
                SELECT sum(grade),gender FROM student GROUP BY gender HAVING SUM(grade)&lt;300;
        使用limit限制查询结果的数量：
            LIMIT：后面可以跟2个参数，“OFFSET”：为可选值，表示偏移量，如果偏移量为0则从查询结果的第一条记录开始…以此类推，如果不指定其默认值为0。“记录数”：表示返回查询记录的条数。
                SELECT * FROM student LIMIT 4;
                SELECT * FROM student ORDER BY grade DESC LIMIT 4,4;
二、常用函数
    MySQL中提供了丰富的函数，通过这些函数可以简化用户对数据的操作。
    MySQL中的函数包括数学函数、字符串函数、日期和时间函数、条件判断函数、加密函数等等
        SELECT CONCAT(id,&#39;_&#39;,name,&#39;_&#39;,grade,&#39;_&#39;,gender) FROM student;
        SELECT id,IF(gender=&#39;男&#39;,1,0) FROM student;
三、为表和字段取别名
    在查询操作时，如果表名或字段名很长使用起来就不太方便，这时可以为表和字段取一个别名，这个别名可以代替其指定的表和字段。
    1.为表取别名
    2.为字段取别名
        为表取别名：
            SELECT * FROM 表名 [AS] 别名;
                SELECT * FROM student AS s WHERE s.gender=&#39;女&#39;;
        为字段取别名：
            SELECT 字段名 [AS] 别名[,字段名 [AS] 别名,……] FROM 表名;
                SELECT name AS stu_name,gender stu_gender FROM student;
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
